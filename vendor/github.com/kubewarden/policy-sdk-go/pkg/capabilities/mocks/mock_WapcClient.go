// Code generated by mockery v2.43.2. DO NOT EDIT.

//go:build !wasi && !wasip1

package mocks

import mock "github.com/stretchr/testify/mock"

// MockWapcClient is an autogenerated mock type for the WapcClient type
type MockWapcClient struct {
	mock.Mock
}

type MockWapcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWapcClient) EXPECT() *MockWapcClient_Expecter {
	return &MockWapcClient_Expecter{mock: &_m.Mock}
}

// HostCall provides a mock function with given fields: binding, namespace, operation, payload
func (_m *MockWapcClient) HostCall(binding string, namespace string, operation string, payload []byte) ([]byte, error) {
	ret := _m.Called(binding, namespace, operation, payload)

	if len(ret) == 0 {
		panic("no return value specified for HostCall")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) ([]byte, error)); ok {
		return rf(binding, namespace, operation, payload)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, []byte) []byte); ok {
		r0 = rf(binding, namespace, operation, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, []byte) error); ok {
		r1 = rf(binding, namespace, operation, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWapcClient_HostCall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HostCall'
type MockWapcClient_HostCall_Call struct {
	*mock.Call
}

// HostCall is a helper method to define mock.On call
//   - binding string
//   - namespace string
//   - operation string
//   - payload []byte
func (_e *MockWapcClient_Expecter) HostCall(binding interface{}, namespace interface{}, operation interface{}, payload interface{}) *MockWapcClient_HostCall_Call {
	return &MockWapcClient_HostCall_Call{Call: _e.mock.On("HostCall", binding, namespace, operation, payload)}
}

func (_c *MockWapcClient_HostCall_Call) Run(run func(binding string, namespace string, operation string, payload []byte)) *MockWapcClient_HostCall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]byte))
	})
	return _c
}

func (_c *MockWapcClient_HostCall_Call) Return(response []byte, err error) *MockWapcClient_HostCall_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockWapcClient_HostCall_Call) RunAndReturn(run func(string, string, string, []byte) ([]byte, error)) *MockWapcClient_HostCall_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWapcClient creates a new instance of MockWapcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWapcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWapcClient {
	mock := &MockWapcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
